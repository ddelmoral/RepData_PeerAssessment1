install.packages("sna")
install.packages("igraph")
library(httr)
require(httpuv)
swirl::install_course("Getting and Cleaning Data")
swirl
swirl()
swirl()
swirl()
load(swirl)
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot (pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region=="east")
head(east)
hist(pm25, col="green")
hist(east$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "east")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main= "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main= "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist()))
with(cars, plot(speed,dist())
)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
with(state$region)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$ozone,na.rm=TRUE)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set= "n")
plot(airquality$Wind, type="n",airquality$Ozone)
title("Wind and Ozone in NYC")
may<-airquality$Month=5
may<-airquality$Month==5
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality, Month<>5)
notmay<-subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
install.packages("dplyr")
library(dplyr)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len = 10))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
swirl()
library(swirl)
swirl()
quit
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col= cm.colors(25) )
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, distTmp, hich.min)
apply(distTmp, distTmp, which.min)
apply(distTmp, 2, which.min)
points( x,y, pch=19, cex=2, col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y, pch=19,cex=2, col = cols1[newClust2])
tapply( x, newClust2, mean)
tapply( y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataframe, centers=3)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points( kmObj$centers, col=c("black","red","green"),pch=3, cex=3, lwd=3)
plot (x, y, col= kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot (x, y, col= kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot (x, y, col= kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
matrix(data, nrow = rows, ncol = cols)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(map))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*%  diag(svd1$d[1:2])  %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd,subject=1)
sub1<-subset(ssd,subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1;6)
showMe(1:6)
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$1)
dim(svd1$u)
maxCon<-which.max(svd1$v)
maxCon<-which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col= unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1[, -c(561, 563)],centers=6)
kClust<-kmeans(sub1[, -c(562, 563)],centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19, ylab="Laying Cluster" )
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
setwd("~/Personal/Learning/Reproducible Research/Project_1")
d<-getwd()
d
activity_data<- read.csv("activity.csv", header = TRUE, sep = ",", na.strings = "NA")
activity_data
head(activity_data)
tail(activity_data)
summary(activity_data)
str(activity_data)
activity_data$date <- as.Date(activity_data$date, format = "%Y-%m-%d")
activity_data$interval <- factor(activity_data$interval)
NA_Idx <- is.na(as.character(activity_data$steps))
activity_data_no_NA <- activity_data[!NA_Idx,]
head(activity_data_no_NA)
steps_per_day <- aggregate(steps ~ date, data = activity_data_no_NA, sum)
colnames(steps_per_day) <- c("date", "steps")
hist(as.numeric(steps_per_day$steps), breaks = 20, col = "red", xlab = "Steps", main= "Number of steps per day")
hist(as.numeric(steps_per_day$steps), breaks = 20, col = "red", xlab = "Steps", main= "Steps per day")
hist(as.numeric(steps_per_day$steps), breaks = 20, col = "blue", xlab = "Steps", main= "Steps per day")
hist(as.numeric(steps_per_day$steps), breaks = 20, col = "green", xlab = "Steps", main= "Steps per day")
hist(as.numeric(steps_per_day$steps), breaks = 20, col = "green", xlab = "Steps", ylab = "Frequency", main= "Steps per day")
hist(as.numeric(steps_per_day$steps), breaks = 40, col = "green", xlab = "Steps", ylab = "Frequency", main= "Steps per day")
hist(as.numeric(steps_per_day$steps), breaks = 10, col = "green", xlab = "Steps", ylab = "Frequency", main= "Steps per day")
mean(steps_per_day$steps)
median(steps_each_day$steps)
median(steps_per_day$steps)
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="green")
max_steps_per_interval <- max(steps_per_interval$average_steps)
max_steps_per_interval
intervale_max_steps<-steps_per_interval[which.max(steps_per_interval$average_steps),]$interval
intervale_max_steps
sum(is.na(as.character(acivity_data$steps)))
sum(is.na(as.character(activity_data$steps)))
sum(is.na(as.character(activity_data$date)))
sum(is.na(as.character(activity_data$interval)))
NA_Idx <- which(is.na(as.character(activity_data$steps)))
complete_activity_data <- activity_data
complete_activity_data[NA_Idx, ]$steps<-unlist(lapply(NA_Idx, FUN=function(NA_Idx){
steps_per_interval[activity_data[NA_index,]$interval==steps_per_interval$interval,]$average_steps
}))
complete_activity_data[NA_Idx, ]$steps<-unlist(lapply(NA_Idx, FUN=function(NA_Idx){
steps_per_interval[activity_data[NA_Idx,]$interval==steps_per_interval$interval,]$average_steps
}))
summary(complete_activity_data)
str(complete_activity_data
)
steps_per_day_complete <- aggregate(steps ~ date, data = complete_activity_data, sum)
colnames(steps_per_day_complete) <- c("date", "steps")
hist(as.numeric(steps_per_day_complete$steps), breaks = 20, col = "blue", xlab = "Steps", main= "Steps per day")
hist(as.numeric(steps_per_day_complete$steps), breaks = 20, col = "green", xlab = "Steps", main= "Steps per day")
1
hist(as.numeric(steps_per_day_complete$steps), breaks = 10, col = "green", xlab = "Steps", main= "Steps per day")
hist(as.numeric(steps_per_day_complete$steps), breaks = 40, col = "green", xlab = "Steps", main= "Steps per day")
hist(as.numeric(steps_per_day_complete$steps), breaks = 25, col = "green", xlab = "Steps", main= "Steps per day")
mean(steps_per_day_complete$steps)
median(steps_per_day_complete$steps
)
complete_activity_data$day <- as.factor(weekdays(complete_activity_data$date))
complete_activity_data$is_weekday <- ifelse(!(complete_activity_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
weekdays_activity_data <- complete_activity_data[complete_activity_data$is_weekday,]
steps_per_interval_weekdays <- aggregate(weekdays_activity_data$steps, by=list(interval=weekdays_activity_data$interval), FUN=mean)
weekends_activity_data <- complete_activity_data[!complete_activity_data$is_weekday,]
steps_per_interval_weekends <- aggregate(weekends_activity_data$steps, by=list(interval=weekends_activity_data$interval), FUN=mean)
colnames(steps_per_interval_weekdays) <- c("interval", "average_steps")
colnames(steps_per_interval_weekends) <- c("interval", "average_steps")
steps_per_interval_weekdays$day <- "Weekday"
steps_per_interval_weekends$day <- "Weekend"
week_activity_data <- rbind(steps_per_interval_weekends, steps_per_interval_weekdays)
week_activity_data$day <- as.factor(week_activity_data$day
)
library(lattice)
xyplot(average_steps ~  interval | day, data = week_activity_data, layout = c(1,2), type ="l", ylab="Steps")
xyplot(average_steps ~  interval | day, data = week_activity_data, layout = c(2,1), type ="l", ylab="Steps")
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
source('~/Personal/Learning/Reproducible Research/Project_1/project1.R')
if (!file.exists("project1")) {
dir.create("project1")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile = "./project1/activity.zip")
unzip("./project1/activity.zip", exdir = "./project1", overwrite = TRUE)
activity_data<- read.csv("activity.csv", header = TRUE, sep = ",", na.strings = "NA")
setwd("~/Personal/Learning/Reproducible Research/RepData_PeerAssessment1")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="2",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="3",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="d",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="b",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="p",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="c",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="o",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="h",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
# Calculating the average number of steps across all days
steps_per_interval <- aggregate(activity_data_no_NA$steps, by=list(interval=activity_data_no_NA$interval), FUN=mean)
colnames(steps_per_interval) <- c("interval", "average_steps")
# Drawing average activity
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Activity Pattern per Day",  col ="blue")
